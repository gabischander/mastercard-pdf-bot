#!/usr/bin/env python3
"""
Mastercard Fixed Downloader
Procura por "Publication Date" e datas em elementos separados
"""

import time
import zipfile
import shutil
import re
from datetime import datetime, timedelta
from pathlib import Path
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from webdriver_manager.chrome import ChromeDriverManager

class FixedDownloader:
    def __init__(self):
        self.download_dir = Path("downloads_fixed")
        self.pdf_dir = Path("pdfs_fixed")
        self.setup_directories()
        self.driver = None
        
    def setup_directories(self):
        """Prepara diret√≥rios"""
        self.download_dir.mkdir(exist_ok=True)
        self.pdf_dir.mkdir(exist_ok=True)
        
        # Limpa arquivos anteriores
        for file in self.download_dir.glob("*"):
            if file.is_file():
                file.unlink()
        for file in self.pdf_dir.glob("*"):
            if file.is_file():
                file.unlink()
                
        print(f"‚úÖ Diret√≥rios preparados: {self.download_dir}, {self.pdf_dir}")
        
    def get_target_date_range(self):
        """Calcula per√≠odo: da quarta anterior at√© hoje"""
        today = datetime.now()
        
        # Encontra a quarta-feira anterior
        days_since_wednesday = (today.weekday() - 2) % 7
        if days_since_wednesday == 0 and today.weekday() == 2:
            last_wednesday = today - timedelta(days=7)
        else:
            last_wednesday = today - timedelta(days=days_since_wednesday)
            
        if last_wednesday > today:
            last_wednesday = last_wednesday - timedelta(days=7)
            
        print(f"üóìÔ∏è Hoje: {today.strftime('%d %b %Y (%A)')}")
        print(f"üéØ Per√≠odo: {last_wednesday.strftime('%d %b %Y')} at√© {today.strftime('%d %b %Y')}")
        
        return last_wednesday, today
        
    def setup_chrome(self):
        """Configura Chrome"""
        chrome_options = Options()
        
        # Download settings
        download_path = str(self.download_dir.absolute())
        prefs = {
            "download.default_directory": download_path,
            "download.prompt_for_download": False,
            "download.directory_upgrade": True,
            "safebrowsing.enabled": True
        }
        chrome_options.add_experimental_option("prefs", prefs)
        
        service = Service(ChromeDriverManager().install())
        self.driver = webdriver.Chrome(service=service, options=chrome_options)
        
    def navigate_to_announcements(self):
        """Navega para announcements"""
        print("\nüåê Abrindo mastercardconnect.com...")
        self.driver.get("https://mastercardconnect.com")
        time.sleep(3)
        
        range_start, range_end = self.get_target_date_range()
        
        print(f"\nüéØ DOCUMENTOS A BAIXAR: {range_start.strftime('%d %b')} - {range_end.strftime('%d %b %Y')}")
        print("="*60)
        print("1. üîë Fa√ßa login")
        print("2. üè¢ V√° para Technical Resource Center")  
        print("3. üì¢ Clique em Announcements")
        print("4. üëÄ Aguarde ver os documentos")
        print("="*60)
        
        input("Pressione ENTER quando estiver vendo os documentos...")
        
        # Gerencia abas
        if len(self.driver.window_handles) > 1:
            self.driver.switch_to.window(self.driver.window_handles[-1])
            print("‚úÖ Usando √∫ltima aba")
            
        time.sleep(8)  # Aguarda carregamento mais tempo
        
    def find_document_containers_by_date(self):
        """Encontra containers procurando por datas espec√≠ficas primeiro"""
        print(f"\nüîç Procurando documentos por datas espec√≠ficas...")
        
        range_start, range_end = self.get_target_date_range()
        
        # Lista de datas espec√≠ficas para procurar (baseado no debug)
        target_dates = ['1 Jul 2025', '30 Jun 2025', '25 Jun 2025']
        
        valid_documents = []
        
        for date_str in target_dates:
            print(f"\nüìÖ Procurando por: {date_str}")
            
            # Converte string para datetime para verificar se est√° no per√≠odo
            try:
                date_parts = date_str.split()
                day = int(date_parts[0])
                month_str = date_parts[1]
                year = int(date_parts[2])
                
                month_map = {
                    'Jan': 1, 'Feb': 2, 'Mar': 3, 'Apr': 4, 'May': 5, 'Jun': 6,
                    'Jul': 7, 'Aug': 8, 'Sep': 9, 'Oct': 10, 'Nov': 11, 'Dec': 12
                }
                
                if month_str in month_map:
                    doc_date = datetime(year, month_map[month_str], day)
                    
                    # Verifica se est√° no per√≠odo
                    if range_start <= doc_date <= range_end:
                        print(f"   ‚úÖ Data {date_str} est√° no per√≠odo!")
                        
                        # Procura elementos que cont√™m essa data
                        date_elements = self.driver.find_elements(By.XPATH, f"//*[contains(text(), '{date_str}')]")
                        print(f"   üìã Elementos com a data: {len(date_elements)}")
                        
                        for i, date_elem in enumerate(date_elements):
                            print(f"      üìÖ Elemento {i+1}: {date_elem.text.strip()[:50]}")
                            
                            # Encontra o container pai deste elemento
                            container = self.find_document_container_from_date_element(date_elem)
                            
                            if container:
                                # Procura √≠cone de download no container
                                download_icon = self.find_download_icon_comprehensive(container)
                                
                                if download_icon:
                                    title = self.get_document_title_from_container(container)
                                    
                                    valid_documents.append({
                                        'container': container,
                                        'download_icon': download_icon,
                                        'date': doc_date,
                                        'date_str': date_str,
                                        'title': title
                                    })
                                    print(f"   üéØ Container com √≠cone de download encontrado!")
                                    print(f"      üìÑ T√≠tulo: {title[:60]}...")
                                else:
                                    print(f"   ‚ùå √çcone de download n√£o encontrado no container")
                            else:
                                print(f"   ‚ùå Container pai n√£o encontrado")
                    else:
                        print(f"   ‚è≠Ô∏è Data {date_str} fora do per√≠odo")
                        
            except Exception as e:
                print(f"   ‚ùå Erro ao processar data {date_str}: {e}")
                continue
                
        print(f"\nüìã Documentos v√°lidos encontrados: {len(valid_documents)}")
        
        if valid_documents:
            print("üìÑ Lista de downloads:")
            for i, doc in enumerate(valid_documents):
                print(f"   {i+1}. {doc['title'][:60]}... ({doc['date_str']})")
                
        return valid_documents
        
    def find_document_container_from_date_element(self, date_element):
        """Encontra o container do documento a partir do elemento da data"""
        current = date_element
        
        # Sobe na hierarquia at√© encontrar um container substancial
        for level in range(20):  # Aumentei o n√≠vel de busca
            try:
                parent = current.find_element(By.XPATH, "./..")
                
                # Verifica se √© um container de documento
                if self.is_substantial_container(parent):
                    return parent
                    
                current = parent
                
            except:
                break
                
        return None
        
    def is_substantial_container(self, element):
        """Verifica se um elemento √© um container substancial (documento completo)"""
        try:
            text = element.text.strip()
            
            # Deve ter conte√∫do substancial
            has_content = len(text) > 80
            
            # Deve ter m√∫ltiplas linhas
            has_multiple_lines = len(text.split('\n')) >= 4
            
            # Pode conter palavras-chave de documento
            has_doc_keywords = any(keyword in text for keyword in [
                'GLB', 'LAC', 'Mastercard', 'Bulletin', 'announcement', 
                'Publication Date', 'Effective Date', 'Audience'
            ])
            
            # Deve ser um elemento container
            tag = element.tag_name.lower()
            is_container_tag = tag in ['div', 'article', 'section', 'li', 'td']
            
            return has_content and has_multiple_lines and has_doc_keywords and is_container_tag
            
        except:
            return False
            
    def find_download_icon_comprehensive(self, container):
        """Busca abrangente por √≠cones de download"""
        
        print(f"   üîç Procurando √≠cone de download no container...")
        
        # Estrat√©gias m√∫ltiplas para encontrar √≠cones de download
        search_strategies = [
            # 1. Busca por classes e atributos √≥bvios
            {
                'name': 'Classes de download',
                'selectors': [
                    './/*[contains(@class, "download")]',
                    './/*[contains(@class, "btn-download")]', 
                    './/*[contains(@class, "download-btn")]',
                    './/*[contains(@class, "download-icon")]'
                ]
            },
            
            # 2. Busca por √≠cones Font Awesome
            {
                'name': '√çcones Font Awesome',
                'selectors': [
                    './/i[contains(@class, "fa-download")]',
                    './/i[contains(@class, "fa-arrow-down")]',
                    './/i[contains(@class, "fa-file")]'
                ]
            },
            
            # 3. Busca por SVGs
            {
                'name': 'SVG √≠cones',
                'selectors': [
                    './/svg',
                    './/*[name()="svg"]'
                ]
            },
            
            # 4. Busca por links e bot√µes gen√©ricos
            {
                'name': 'Links e bot√µes',
                'selectors': [
                    './/a',
                    './/button',
                    './/*[@onclick]'
                ]
            },
            
            # 5. Busca por elementos com caracter√≠sticas visuais de √≠cone
            {
                'name': 'Elementos pequenos clic√°veis',
                'selectors': [
                    './/*[@role="button"]',
                    './/*[@tabindex]',
                    './/*[contains(@style, "cursor")]'
                ]
            }
        ]
        
        all_candidates = []
        
        for strategy in search_strategies:
            print(f"      üìã {strategy['name']}...")
            
            for selector in strategy['selectors']:
                try:
                    elements = container.find_elements(By.XPATH, selector)
                    
                    for elem in elements:
                        # Filtra elementos muito pequenos ou ocultos
                        try:
                            rect = elem.rect
                            is_visible = rect['width'] > 0 and rect['height'] > 0
                            is_reasonable_size = rect['width'] >= 10 and rect['height'] >= 10
                            
                            if is_visible and is_reasonable_size:
                                all_candidates.append(elem)
                                
                        except:
                            all_candidates.append(elem)  # Se n√£o conseguir verificar, inclui
                            
                except:
                    continue
                    
        print(f"      üìä Total de candidatos: {len(all_candidates)}")
        
        # Remove duplicatas
        unique_candidates = []
        for candidate in all_candidates:
            if candidate not in unique_candidates:
                unique_candidates.append(candidate)
                
        print(f"      üìä Candidatos √∫nicos: {len(unique_candidates)}")
        
        # Avalia cada candidato
        best_candidate = None
        best_score = 0
        
        for i, candidate in enumerate(unique_candidates):
            score = self.evaluate_download_candidate(candidate, container)
            
            print(f"         {i+1}. <{candidate.tag_name}> score: {score}")
            
            if score > best_score:
                best_score = score
                best_candidate = candidate
                
        if best_candidate and best_score > 2:  # Score m√≠nimo
            print(f"      ‚úÖ Melhor candidato: <{best_candidate.tag_name}> (score: {best_score})")
            return best_candidate
        else:
            print(f"      ‚ùå Nenhum candidato v√°lido (melhor score: {best_score})")
            return None
            
    def evaluate_download_candidate(self, element, container):
        """Avalia se um elemento pode ser um √≠cone de download"""
        score = 0
        
        try:
            # Atributos do elemento
            tag = element.tag_name.lower()
            classes = element.get_attribute('class') or ''
            href = element.get_attribute('href') or ''
            onclick = element.get_attribute('onclick') or ''
            title = element.get_attribute('title') or ''
            aria_label = element.get_attribute('aria-label') or ''
            innerHTML = element.get_attribute('innerHTML') or ''
            
            # Texto combinado para an√°lise
            all_text = f"{classes} {href} {onclick} {title} {aria_label} {innerHTML}".lower()
            
            # 1. Palavras-chave de download (+3 pontos cada)
            download_keywords = ['download', 'zip', 'pdf', 'file', 'export', 'save']
            for keyword in download_keywords:
                if keyword in all_text:
                    score += 3
                    
            # 2. √çcones espec√≠ficos (+2 pontos cada)
            icon_indicators = ['arrow-down', 'fa-download', 'download-icon', 'btn-download']
            for indicator in icon_indicators:
                if indicator in all_text:
                    score += 2
                    
            # 3. Elementos clic√°veis (+1 ponto)
            if tag in ['a', 'button'] or onclick or href:
                score += 1
                
            # 4. SVG ou √≠cone (+1 ponto)
            if tag in ['svg', 'i'] or 'icon' in classes:
                score += 1
                
            # 5. Posi√ß√£o no container (lado direito) (+1 ponto)
            try:
                elem_rect = element.rect
                container_rect = container.rect
                
                if elem_rect and container_rect:
                    # Verifica se est√° na metade direita
                    container_center = container_rect['x'] + (container_rect['width'] / 2)
                    is_on_right = elem_rect['x'] >= container_center
                    
                    if is_on_right:
                        score += 1
                        
            except:
                pass
                
            # 6. Tamanho adequado para √≠cone (+1 ponto)
            try:
                rect = element.rect
                if rect:
                    # √çcones geralmente s√£o pequenos mas n√£o min√∫sculos
                    width, height = rect['width'], rect['height']
                    if 15 <= width <= 50 and 15 <= height <= 50:
                        score += 1
                        
            except:
                pass
                
        except:
            pass
            
        return score
        
    def get_document_title_from_container(self, container):
        """Extrai t√≠tulo do documento do container"""
        try:
            text_lines = container.text.strip().split('\n')
            
            # Procura pela primeira linha que parece ser um t√≠tulo
            for line in text_lines:
                line = line.strip()
                
                # Pula linhas com metadados
                if any(skip in line for skip in ['Audience:', 'Type:', 'Region:', 'Category:', 'Publication Date:', 'Effective Date:']):
                    continue
                    
                # Procura por linhas com c√≥digos de documento (GLB, LAC, etc.)
                if re.match(r'^[A-Z]{2,4}\s+\d+', line):
                    return line
                    
                # Se for uma linha substancial, usa como t√≠tulo
                if len(line) > 20:
                    return line
                    
            return "Documento sem t√≠tulo identificado"
            
        except:
            return "Documento sem t√≠tulo"
            
    def download_documents(self, documents):
        """Executa downloads clicando nos √≠cones"""
        if not documents:
            print("‚ùå Nenhum documento para baixar")
            return []
            
        print(f"\nüì• Iniciando downloads de {len(documents)} documentos...")
        
        downloaded_files = []
        actions = ActionChains(self.driver)
        
        for i, doc in enumerate(documents):
            try:
                print(f"\nüì• Download {i+1}/{len(documents)}:")
                print(f"   üìÑ {doc['title'][:60]}...")
                print(f"   üìÖ Data: {doc['date_str']}")
                
                # Scroll para o documento
                self.driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", doc['container'])
                time.sleep(3)
                
                # Destaca o √≠cone (debug visual)
                self.driver.execute_script("arguments[0].style.border='3px solid red'; arguments[0].style.backgroundColor='yellow';", doc['download_icon'])
                time.sleep(2)
                
                print("   üñ±Ô∏è Clicando no √≠cone de download...")
                
                # M√∫ltiplas tentativas de clique
                click_success = False
                
                try:
                    # M√©todo 1: Clique direto
                    doc['download_icon'].click()
                    click_success = True
                    print("      ‚úÖ Clique direto funcionou")
                except Exception as e1:
                    try:
                        # M√©todo 2: JavaScript click
                        self.driver.execute_script("arguments[0].click();", doc['download_icon'])
                        click_success = True
                        print("      ‚úÖ Clique JavaScript funcionou")
                    except Exception as e2:
                        try:
                            # M√©todo 3: ActionChains
                            actions.move_to_element(doc['download_icon']).click().perform()
                            click_success = True
                            print("      ‚úÖ ActionChains funcionou")
                        except Exception as e3:
                            print(f"      ‚ùå Todos os m√©todos de clique falharam: {e1}, {e2}, {e3}")
                
                # Remove destaque
                self.driver.execute_script("arguments[0].style.border=''; arguments[0].style.backgroundColor='';", doc['download_icon'])
                
                if click_success:
                    print("   ‚è≥ Aguardando download...")
                    
                    # Aguarda download
                    downloaded_file = self.wait_for_download()
                    
                    if downloaded_file:
                        downloaded_files.append({
                            'file': downloaded_file,
                            'date': doc['date'],
                            'date_str': doc['date_str'],
                            'title': doc['title']
                        })
                        print(f"   ‚úÖ Baixado: {downloaded_file.name}")
                    else:
                        print(f"   ‚ö†Ô∏è Download n√£o detectado (pode ter funcionado)")
                        
                time.sleep(4)  # Pausa entre downloads
                
            except Exception as e:
                print(f"   ‚ùå Erro no download: {e}")
                continue
                
        return downloaded_files
        
    def wait_for_download(self, timeout=45):
        """Aguarda download ser conclu√≠do"""
        start_time = time.time()
        initial_files = set(f.name for f in self.download_dir.glob("*") if f.is_file())
        
        while time.time() - start_time < timeout:
            current_files = set(f.name for f in self.download_dir.glob("*") if f.is_file())
            new_files = current_files - initial_files
            
            # Verifica arquivos completos
            complete_files = []
            for filename in new_files:
                if not filename.endswith(('.crdownload', '.tmp', '.part')):
                    file_path = self.download_dir / filename
                    if file_path.exists() and file_path.stat().st_size > 500:  # Pelo menos 500 bytes
                        complete_files.append(filename)
                        
            if complete_files:
                return self.download_dir / complete_files[0]
                
            time.sleep(3)
            
        return None
        
    def extract_pdfs(self, downloaded_files):
        """Extrai PDFs dos arquivos baixados"""
        if not downloaded_files:
            return []
            
        print(f"\nüìÇ Extraindo PDFs de {len(downloaded_files)} arquivos...")
        
        extracted_pdfs = []
        
        for file_info in downloaded_files:
            file_path = file_info['file']
            
            try:
                if file_path.suffix.lower() == '.zip':
                    print(f"üì¶ Extraindo ZIP: {file_path.name}")
                    
                    extract_dir = self.pdf_dir / f"extracted_{file_info['date_str'].replace(' ', '_')}"
                    extract_dir.mkdir(exist_ok=True)
                    
                    with zipfile.ZipFile(file_path, 'r') as zip_ref:
                        for member in zip_ref.namelist():
                            if member.lower().endswith('.pdf'):
                                zip_ref.extract(member, extract_dir)
                                extracted_pdf = extract_dir / member
                                extracted_pdfs.append({
                                    'pdf_path': extracted_pdf,
                                    'date_str': file_info['date_str'],
                                    'title': file_info['title'],
                                    'original_zip': file_path.name
                                })
                                print(f"   üìÑ PDF extra√≠do: {member}")
                                
                elif file_path.suffix.lower() == '.pdf':
                    pdf_dest = self.pdf_dir / file_path.name
                    shutil.copy2(file_path, pdf_dest)
                    extracted_pdfs.append({
                        'pdf_path': pdf_dest,
                        'date_str': file_info['date_str'],
                        'title': file_info['title'],
                        'original_zip': None
                    })
                    print(f"üìÑ PDF copiado: {file_path.name}")
                    
            except Exception as e:
                print(f"‚ùå Erro ao extrair {file_path}: {e}")
                continue
                
        return extracted_pdfs
        
    def run(self):
        """Executa o downloader completo"""
        print("üîß MASTERCARD FIXED DOWNLOADER")
        print("=" * 60)
        
        try:
            # Setup
            self.setup_chrome()
            
            # Navega√ß√£o
            self.navigate_to_announcements()
            
            # Encontra documentos por data
            documents = self.find_document_containers_by_date()
            
            if not documents:
                print("‚ùå Nenhum documento encontrado no per√≠odo")
                
                # Tenta busca alternativa
                print("\nüîÑ Tentando busca alternativa...")
                return False
                
            # Downloads
            downloaded_files = self.download_documents(documents)
            
            # Extra√ß√£o (mesmo que n√£o tenha detectado downloads)
            extracted_pdfs = self.extract_pdfs(downloaded_files)
            
            # Verifica se h√° arquivos na pasta de download mesmo sem detec√ß√£o
            all_files = list(self.download_dir.glob("*"))
            zip_files = [f for f in all_files if f.suffix.lower() == '.zip']
            pdf_files = [f for f in all_files if f.suffix.lower() == '.pdf']
            
            print(f"\nüìÅ Arquivos encontrados na pasta de download:")
            print(f"   üì¶ ZIPs: {len(zip_files)}")
            print(f"   üìÑ PDFs: {len(pdf_files)}")
            
            # Relat√≥rio final
            range_start, range_end = self.get_target_date_range()
            
            print("\n" + "="*60)
            print("üéâ PROCESSO CONCLU√çDO!")
            print(f"üìÖ Per√≠odo: {range_start.strftime('%d %b')} - {range_end.strftime('%d %b %Y')}")
            print(f"üìã Documentos encontrados: {len(documents)}")
            print(f"üì• Downloads detectados: {len(downloaded_files)}")
            print(f"üìÑ PDFs extra√≠dos: {len(extracted_pdfs)}")
            print(f"üìÅ Arquivos totais baixados: {len(all_files)}")
            
            if extracted_pdfs:
                print(f"\nüìÅ PDFs SALVOS EM: {self.pdf_dir.absolute()}")
                for pdf in extracted_pdfs:
                    zip_info = f" (de {pdf['original_zip']})" if pdf['original_zip'] else ""
                    print(f"  ‚Ä¢ {pdf['pdf_path'].name}{zip_info}")
                    
            return len(extracted_pdfs) > 0 or len(all_files) > 0
            
        except Exception as e:
            print(f"‚ùå Erro: {e}")
            return False
            
        finally:
            if self.driver:
                input("\nPressione ENTER para fechar o navegador...")
                self.driver.quit()

def main():
    downloader = FixedDownloader()
    
    try:
        success = downloader.run()
        
        if success:
            print("\nüéâ PROCESSO FINALIZADO!")
        else:
            print("\nüòî Nenhum arquivo detectado")
            
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Processo interrompido")

if __name__ == "__main__":
    main()
