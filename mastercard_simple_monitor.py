#!/usr/bin/env python3
"""
Mastercard Simple Monitor
Apenas monitora downloads sem interferir na p√°gina
"""

import time
import zipfile
import shutil
from datetime import datetime, timedelta
from pathlib import Path
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from webdriver_manager.chrome import ChromeDriverManager

class SimpleMonitor:
    def __init__(self):
        self.download_dir = Path("downloads_simple")
        self.pdf_dir = Path("pdfs_simple") 
        self.setup_directories()
        self.driver = None
        
    def setup_directories(self):
        """Prepara diret√≥rios"""
        self.download_dir.mkdir(exist_ok=True)
        self.pdf_dir.mkdir(exist_ok=True)
        
        print(f"‚úÖ Pasta de downloads: {self.download_dir.absolute()}")
        print(f"‚úÖ Pasta de PDFs: {self.pdf_dir.absolute()}")
        
    def setup_chrome(self):
        """Configura Chrome APENAS para downloads - sem interferir na p√°gina"""
        chrome_options = Options()
        
        # Configura√ß√µes de download
        download_path = str(self.download_dir.absolute())
        prefs = {
            "download.default_directory": download_path,
            "download.prompt_for_download": False,
            "download.directory_upgrade": True,
            "safebrowsing.enabled": True
        }
        chrome_options.add_experimental_option("prefs", prefs)
        
        service = Service(ChromeDriverManager().install())
        self.driver = webdriver.Chrome(service=service, options=chrome_options)
        
        # Apenas abre a p√°gina - N√ÉO FAZ MAIS NADA
        print("üåê Abrindo Mastercard Connect...")
        self.driver.get("https://mastercardconnect.com")
        
        print("\n" + "="*60)
        print("üéØ INSTRU√á√ïES SIMPLES:")
        print("1. üîë Fa√ßa login no site")
        print("2. üè¢ V√° para Technical Resource Center > Announcements") 
        print("3. üëÄ Encontre documentos com Publication Date entre 25 Jun - 01 Jul 2025")
        print("4. üñ±Ô∏è Clique normalmente nos √≠cones de download (seta para baixo)")
        print("5. üìÅ Os arquivos ser√£o baixados para a pasta configurada")
        print("="*60)
        
        input("\nPressione ENTER quando tiver terminado de baixar os arquivos...")
        
    def check_downloads(self):
        """Verifica arquivos baixados"""
        files = list(self.download_dir.glob("*"))
        downloaded_files = [f for f in files if f.is_file()]
        
        print(f"\nüìÅ Arquivos encontrados na pasta de downloads: {len(downloaded_files)}")
        
        if downloaded_files:
            print("üìã Lista de arquivos:")
            for i, file in enumerate(downloaded_files):
                size_mb = file.stat().st_size / (1024 * 1024)
                print(f"   {i+1}. {file.name} ({size_mb:.2f} MB)")
                
        return downloaded_files
        
    def extract_pdfs(self, downloaded_files):
        """Extrai PDFs dos arquivos"""
        if not downloaded_files:
            return []
            
        print(f"\nüì¶ Processando {len(downloaded_files)} arquivos...")
        
        extracted_pdfs = []
        
        for i, file_path in enumerate(downloaded_files):
            try:
                print(f"\nüìÇ Arquivo {i+1}: {file_path.name}")
                
                if file_path.suffix.lower() == '.zip':
                    # Extrai ZIP
                    extract_dir = self.pdf_dir / f"extracted_{file_path.stem}"
                    extract_dir.mkdir(exist_ok=True)
                    
                    with zipfile.ZipFile(file_path, 'r') as zip_ref:
                        pdf_files = [f for f in zip_ref.namelist() if f.lower().endswith('.pdf')]
                        
                        print(f"   üìÑ PDFs no ZIP: {len(pdf_files)}")
                        
                        for pdf_file in pdf_files:
                            zip_ref.extract(pdf_file, extract_dir)
                            extracted_pdf = extract_dir / pdf_file
                            extracted_pdfs.append(extracted_pdf)
                            print(f"      ‚úÖ {pdf_file}")
                            
                elif file_path.suffix.lower() == '.pdf':
                    # Copia PDF
                    pdf_dest = self.pdf_dir / file_path.name
                    shutil.copy2(file_path, pdf_dest)
                    extracted_pdfs.append(pdf_dest)
                    print(f"   ‚úÖ PDF copiado")
                    
                else:
                    print(f"   ‚ö†Ô∏è Tipo n√£o suportado: {file_path.suffix}")
                    
            except Exception as e:
                print(f"   ‚ùå Erro: {e}")
                continue
                
        return extracted_pdfs
        
    def run(self):
        """Executa monitor simples"""
        print("üîç MASTERCARD SIMPLE MONITOR")
        print("=" * 50)
        print("üìÖ Per√≠odo: 25 Jun - 01 Jul 2025")
        print("=" * 50)
        
        try:
            # Apenas configura Chrome e abre p√°gina
            self.setup_chrome()
            
            # Verifica downloads
            downloaded_files = self.check_downloads()
            
            if not downloaded_files:
                print("\nüòî Nenhum arquivo encontrado na pasta de downloads")
                print(f"üîç Verifique se os downloads foram para: {self.download_dir.absolute()}")
                return False
                
            # Processa arquivos
            extracted_pdfs = self.extract_pdfs(downloaded_files)
            
            # Relat√≥rio
            print("\n" + "="*50)
            print("üéâ RESULTADO FINAL!")
            print(f"üì• Arquivos baixados: {len(downloaded_files)}")
            print(f"üìÑ PDFs extra√≠dos: {len(extracted_pdfs)}")
            
            if extracted_pdfs:
                print(f"\nüìÅ PDFs ORGANIZADOS EM: {self.pdf_dir.absolute()}")
                for pdf in extracted_pdfs:
                    print(f"  ‚Ä¢ {pdf.name}")
                    
            return len(extracted_pdfs) > 0
            
        except Exception as e:
            print(f"‚ùå Erro: {e}")
            return False
            
        finally:
            if self.driver:
                input("\nPressione ENTER para fechar o navegador...")
                self.driver.quit()

def main():
    monitor = SimpleMonitor()
    
    try:
        success = monitor.run()
        
        if success:
            print("\nüéâ DOWNLOADS PROCESSADOS COM SUCESSO!")
        else:
            print("\nüí° Dica: Certifique-se de clicar nos √≠cones de download na p√°gina")
            
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Processo interrompido")

if __name__ == "__main__":
    main()
