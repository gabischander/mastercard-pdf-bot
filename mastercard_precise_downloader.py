#!/usr/bin/env python3
"""
Mastercard Precise Downloader
Clica especificamente no √≠cone de seta para baixo no canto direito de cada documento
"""

import time
import zipfile
import shutil
import re
from datetime import datetime, timedelta
from pathlib import Path
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.action_chains import ActionChains
from webdriver_manager.chrome import ChromeDriverManager

class PreciseDownloader:
    def __init__(self):
        self.download_dir = Path("downloads_precise")
        self.pdf_dir = Path("pdfs_precise")
        self.setup_directories()
        self.driver = None
        
    def setup_directories(self):
        """Prepara diret√≥rios"""
        self.download_dir.mkdir(exist_ok=True)
        self.pdf_dir.mkdir(exist_ok=True)
        
        # Limpa arquivos anteriores
        for file in self.download_dir.glob("*"):
            if file.is_file():
                file.unlink()
        for file in self.pdf_dir.glob("*"):
            if file.is_file():
                file.unlink()
                
        print(f"‚úÖ Diret√≥rios preparados: {self.download_dir}, {self.pdf_dir}")
        
    def get_target_date_range(self):
        """Calcula per√≠odo: da quarta anterior at√© hoje"""
        today = datetime.now()
        
        # Encontra a quarta-feira anterior
        days_since_wednesday = (today.weekday() - 2) % 7
        if days_since_wednesday == 0 and today.weekday() == 2:
            last_wednesday = today - timedelta(days=7)
        else:
            last_wednesday = today - timedelta(days=days_since_wednesday)
            
        if last_wednesday > today:
            last_wednesday = last_wednesday - timedelta(days=7)
            
        print(f"üóìÔ∏è Hoje: {today.strftime('%d %b %Y (%A)')}")
        print(f"üéØ Per√≠odo: {last_wednesday.strftime('%d %b %Y')} at√© {today.strftime('%d %b %Y')}")
        
        return last_wednesday, today
        
    def setup_chrome(self):
        """Configura Chrome"""
        chrome_options = Options()
        
        # Download settings
        download_path = str(self.download_dir.absolute())
        prefs = {
            "download.default_directory": download_path,
            "download.prompt_for_download": False,
            "download.directory_upgrade": True,
            "safebrowsing.enabled": True
        }
        chrome_options.add_experimental_option("prefs", prefs)
        
        service = Service(ChromeDriverManager().install())
        self.driver = webdriver.Chrome(service=service, options=chrome_options)
        
    def navigate_to_announcements(self):
        """Navega para announcements"""
        print("\nüåê Abrindo mastercardconnect.com...")
        self.driver.get("https://mastercardconnect.com")
        time.sleep(3)
        
        range_start, range_end = self.get_target_date_range()
        
        print(f"\nüéØ DOCUMENTOS A BAIXAR: {range_start.strftime('%d %b')} - {range_end.strftime('%d %b %Y')}")
        print("="*60)
        print("1. üîë Fa√ßa login")
        print("2. üè¢ V√° para Technical Resource Center")  
        print("3. üì¢ Clique em Announcements")
        print("4. üëÄ Aguarde ver os documentos")
        print("="*60)
        
        input("Pressione ENTER quando estiver vendo os documentos...")
        
        # Gerencia abas
        if len(self.driver.window_handles) > 1:
            self.driver.switch_to.window(self.driver.window_handles[-1])
            print("‚úÖ Usando √∫ltima aba")
            
        time.sleep(5)  # Aguarda carregamento
        
    def find_document_containers(self):
        """Encontra containers de documentos com Publication Date no per√≠odo"""
        print(f"\nüîç Procurando documentos no per√≠odo...")
        
        range_start, range_end = self.get_target_date_range()
        
        # Estrat√©gia: procurar por elementos que cont√™m "Publication Date:"
        pub_date_elements = self.driver.find_elements(By.XPATH, "//*[contains(text(), 'Publication Date:')]")
        print(f"üìã Elementos com 'Publication Date:': {len(pub_date_elements)}")
        
        valid_documents = []
        
        for i, pub_date_elem in enumerate(pub_date_elements):
            try:
                # Pega o texto completo do elemento
                date_text = pub_date_elem.text.strip()
                print(f"\nüìÖ Analisando: {date_text}")
                
                # Extrai a data do texto
                date_match = re.search(r'Publication Date:\s*(\d{1,2})\s+(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s+(\d{4})', date_text)
                
                if date_match:
                    day, month_str, year = date_match.groups()
                    
                    month_map = {
                        'Jan': 1, 'Feb': 2, 'Mar': 3, 'Apr': 4, 'May': 5, 'Jun': 6,
                        'Jul': 7, 'Aug': 8, 'Sep': 9, 'Oct': 10, 'Nov': 11, 'Dec': 12
                    }
                    
                    if month_str in month_map:
                        doc_date = datetime(int(year), month_map[month_str], int(day))
                        
                        # Verifica se est√° no per√≠odo
                        if range_start <= doc_date <= range_end:
                            print(f"   ‚úÖ Data {doc_date.strftime('%d %b %Y')} est√° no per√≠odo!")
                            
                            # Encontra o container pai do documento
                            container = self.find_document_container(pub_date_elem)
                            
                            if container:
                                # Procura o √≠cone de download neste container
                                download_icon = self.find_download_icon_in_container(container)
                                
                                if download_icon:
                                    valid_documents.append({
                                        'container': container,
                                        'download_icon': download_icon,
                                        'date': doc_date,
                                        'date_str': doc_date.strftime('%d %b %Y'),
                                        'title': self.get_document_title(container)
                                    })
                                    print(f"   üéØ √çcone de download encontrado!")
                                else:
                                    print(f"   ‚ùå √çcone de download n√£o encontrado")
                            else:
                                print(f"   ‚ùå Container do documento n√£o encontrado")
                        else:
                            print(f"   ‚è≠Ô∏è Data {doc_date.strftime('%d %b %Y')} fora do per√≠odo")
                            
            except Exception as e:
                print(f"   ‚ùå Erro ao processar: {e}")
                continue
                
        print(f"\nüìã Documentos v√°lidos encontrados: {len(valid_documents)}")
        
        if valid_documents:
            print("üìÑ Lista de downloads:")
            for i, doc in enumerate(valid_documents):
                print(f"   {i+1}. {doc['title'][:60]}... ({doc['date_str']})")
                
        return valid_documents
        
    def find_document_container(self, pub_date_element):
        """Encontra o container principal do documento"""
        current = pub_date_element
        
        # Sobe na hierarquia at√© encontrar um container que parece ser o documento completo
        for level in range(15):
            try:
                parent = current.find_element(By.XPATH, "./..")
                
                # Verifica se este container tem caracter√≠sticas de um documento completo
                if self.is_document_container(parent):
                    return parent
                    
                current = parent
                
            except:
                break
                
        return None
        
    def is_document_container(self, element):
        """Verifica se um elemento √© um container de documento"""
        try:
            # Procura por indicadores de que √© um container completo
            text = element.text
            
            # Deve ter t√≠tulo, publication date, e ser um container substancial
            has_title = len(text.split('\n')) > 3  # M√∫ltiplas linhas
            has_pub_date = 'Publication Date:' in text
            has_content = len(text) > 100  # Conte√∫do substancial
            
            # Verifica tag e classes
            tag = element.tag_name.lower()
            classes = element.get_attribute('class') or ''
            
            # Tags t√≠picas de containers
            is_container_tag = tag in ['div', 'article', 'section', 'li']
            
            return has_title and has_pub_date and has_content and is_container_tag
            
        except:
            return False
            
    def find_download_icon_in_container(self, container):
        """Procura o √≠cone de download espec√≠fico dentro do container"""
        
        # Estrat√©gias para encontrar o √≠cone de download (seta para baixo)
        download_selectors = [
            # √çcones Font Awesome
            './/i[contains(@class, "fa-download")]',
            './/i[contains(@class, "fa-arrow-down")]',
            './/i[contains(@class, "download")]',
            
            # SVG √≠cones
            './/svg[contains(@class, "download")]',
            './/svg[*//path[contains(@d, "download") or contains(@d, "arrow")]]',
            
            # Links e bot√µes com download
            './/a[contains(@href, "download") or contains(@title, "Download") or contains(@aria-label, "Download")]',
            './/button[contains(@title, "Download") or contains(@aria-label, "Download")]',
            
            # Elementos gen√©ricos com classes de download
            './/*[contains(@class, "download")]',
            './/*[contains(@class, "btn-download")]',
            './/*[contains(@class, "download-btn")]',
            './/*[contains(@class, "download-icon")]',
            
            # Procura por elementos clic√°veis no canto superior direito
            './/*[@onclick]',
            './/a',
            './/button'
        ]
        
        for selector in download_selectors:
            try:
                elements = container.find_elements(By.XPATH, selector)
                
                for elem in elements:
                    # Verifica se parece ser um √≠cone de download
                    if self.is_download_icon(elem, container):
                        return elem
                        
            except:
                continue
                
        return None
        
    def is_download_icon(self, element, container):
        """Verifica se um elemento √© o √≠cone de download"""
        try:
            # Atributos do elemento
            href = element.get_attribute('href') or ''
            onclick = element.get_attribute('onclick') or ''
            title = element.get_attribute('title') or ''
            aria_label = element.get_attribute('aria-label') or ''
            classes = element.get_attribute('class') or ''
            
            # Texto e HTML interno
            text = element.text.strip().lower()
            inner_html = element.get_attribute('innerHTML') or ''
            
            # Palavras-chave de download
            download_keywords = ['download', 'zip', 'pdf', 'file', 'arrow-down', 'export']
            
            # Verifica se cont√©m palavras-chave de download
            all_text = f"{href} {onclick} {title} {aria_label} {classes} {text} {inner_html}".lower()
            has_download_keyword = any(keyword in all_text for keyword in download_keywords)
            
            # Verifica posi√ß√£o (deve estar no lado direito)
            try:
                elem_rect = element.rect
                container_rect = container.rect
                
                # Deve estar na metade direita do container
                container_right_half = container_rect['x'] + (container_rect['width'] * 0.6)
                is_on_right = elem_rect['x'] >= container_right_half
                
            except:
                is_on_right = True  # Se n√£o conseguir verificar posi√ß√£o, assume que sim
                
            # Deve ser clic√°vel
            is_clickable = element.tag_name.lower() in ['a', 'button'] or onclick or href
            
            return has_download_keyword and is_on_right and is_clickable
            
        except:
            return False
            
    def get_document_title(self, container):
        """Extrai o t√≠tulo do documento"""
        try:
            # Procura por elementos que parecem ser t√≠tulos
            title_candidates = container.find_elements(By.XPATH, 
                './/h1 | .//h2 | .//h3 | .//h4 | .//h5 | .//h6 | .//*[contains(@class, "title")] | .//*[contains(@class, "heading")]')
            
            if title_candidates:
                return title_candidates[0].text.strip()
                
            # Se n√£o encontrar, pega as primeiras linhas do texto
            lines = container.text.strip().split('\n')
            for line in lines:
                if len(line) > 20 and not line.startswith('Audience:') and not line.startswith('Publication Date:'):
                    return line.strip()
                    
            return "Documento sem t√≠tulo"
            
        except:
            return "Documento sem t√≠tulo"
            
    def download_documents(self, documents):
        """Executa downloads clicando nos √≠cones"""
        if not documents:
            print("‚ùå Nenhum documento para baixar")
            return []
            
        print(f"\nüì• Iniciando downloads de {len(documents)} documentos...")
        
        downloaded_files = []
        actions = ActionChains(self.driver)
        
        for i, doc in enumerate(documents):
            try:
                print(f"\nüì• Download {i+1}/{len(documents)}: {doc['title'][:50]}...")
                print(f"   üìÖ Data: {doc['date_str']}")
                
                # Scroll para o documento
                self.driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", doc['container'])
                time.sleep(2)
                
                # Destaca o √≠cone de download (para debug visual)
                self.driver.execute_script("arguments[0].style.border='3px solid red';", doc['download_icon'])
                time.sleep(1)
                
                print("   üñ±Ô∏è Clicando no √≠cone de download...")
                
                # Tenta diferentes m√©todos de clique
                try:
                    # M√©todo 1: Clique direto
                    doc['download_icon'].click()
                except:
                    try:
                        # M√©todo 2: JavaScript click
                        self.driver.execute_script("arguments[0].click();", doc['download_icon'])
                    except:
                        # M√©todo 3: ActionChains
                        actions.move_to_element(doc['download_icon']).click().perform()
                
                # Remove destaque
                self.driver.execute_script("arguments[0].style.border='';", doc['download_icon'])
                
                print("   ‚è≥ Aguardando download...")
                
                # Aguarda download
                downloaded_file = self.wait_for_download()
                
                if downloaded_file:
                    downloaded_files.append({
                        'file': downloaded_file,
                        'date': doc['date'],
                        'date_str': doc['date_str'],
                        'title': doc['title']
                    })
                    print(f"   ‚úÖ Baixado: {downloaded_file.name}")
                else:
                    print(f"   ‚ùå Download falhou ou n√£o detectado")
                    
                time.sleep(3)  # Pausa entre downloads
                
            except Exception as e:
                print(f"   ‚ùå Erro no download: {e}")
                continue
                
        return downloaded_files
        
    def wait_for_download(self, timeout=60):
        """Aguarda download ser conclu√≠do"""
        start_time = time.time()
        initial_files = set(f.name for f in self.download_dir.glob("*") if f.is_file())
        
        while time.time() - start_time < timeout:
            current_files = set(f.name for f in self.download_dir.glob("*") if f.is_file())
            new_files = current_files - initial_files
            
            # Verifica arquivos completos (n√£o .crdownload)
            complete_files = []
            for filename in new_files:
                if not filename.endswith('.crdownload') and not filename.endswith('.tmp'):
                    file_path = self.download_dir / filename
                    if file_path.exists() and file_path.stat().st_size > 1000:  # Pelo menos 1KB
                        complete_files.append(filename)
                        
            if complete_files:
                return self.download_dir / complete_files[0]
                
            time.sleep(2)
            
        return None
        
    def extract_pdfs(self, downloaded_files):
        """Extrai PDFs dos arquivos baixados"""
        if not downloaded_files:
            return []
            
        print(f"\nüìÇ Extraindo PDFs de {len(downloaded_files)} arquivos...")
        
        extracted_pdfs = []
        
        for file_info in downloaded_files:
            file_path = file_info['file']
            
            try:
                if file_path.suffix.lower() == '.zip':
                    print(f"üì¶ Extraindo ZIP: {file_path.name}")
                    
                    extract_dir = self.pdf_dir / f"extracted_{file_info['date_str'].replace(' ', '_')}"
                    extract_dir.mkdir(exist_ok=True)
                    
                    with zipfile.ZipFile(file_path, 'r') as zip_ref:
                        for member in zip_ref.namelist():
                            if member.lower().endswith('.pdf'):
                                zip_ref.extract(member, extract_dir)
                                extracted_pdf = extract_dir / member
                                extracted_pdfs.append({
                                    'pdf_path': extracted_pdf,
                                    'date_str': file_info['date_str'],
                                    'title': file_info['title'],
                                    'original_zip': file_path.name
                                })
                                print(f"   üìÑ PDF extra√≠do: {member}")
                                
                elif file_path.suffix.lower() == '.pdf':
                    pdf_dest = self.pdf_dir / file_path.name
                    shutil.copy2(file_path, pdf_dest)
                    extracted_pdfs.append({
                        'pdf_path': pdf_dest,
                        'date_str': file_info['date_str'],
                        'title': file_info['title'],
                        'original_zip': None
                    })
                    print(f"üìÑ PDF copiado: {file_path.name}")
                    
            except Exception as e:
                print(f"‚ùå Erro ao extrair {file_path}: {e}")
                continue
                
        return extracted_pdfs
        
    def run(self):
        """Executa o downloader completo"""
        print("üéØ MASTERCARD PRECISE DOWNLOADER")
        print("=" * 60)
        
        try:
            # Setup
            self.setup_chrome()
            
            # Navega√ß√£o
            self.navigate_to_announcements()
            
            # Encontra documentos
            documents = self.find_document_containers()
            
            if not documents:
                print("‚ùå Nenhum documento encontrado no per√≠odo")
                return False
                
            # Downloads
            downloaded_files = self.download_documents(documents)
            
            if not downloaded_files:
                print("‚ùå Nenhum arquivo foi baixado")
                return False
                
            # Extra√ß√£o
            extracted_pdfs = self.extract_pdfs(downloaded_files)
            
            # Relat√≥rio final
            range_start, range_end = self.get_target_date_range()
            
            print("\n" + "="*60)
            print("üéâ DOWNLOAD CONCLU√çDO!")
            print(f"üìÖ Per√≠odo: {range_start.strftime('%d %b')} - {range_end.strftime('%d %b %Y')}")
            print(f"üìã Documentos encontrados: {len(documents)}")
            print(f"üì• Arquivos baixados: {len(downloaded_files)}")
            print(f"üìÑ PDFs extra√≠dos: {len(extracted_pdfs)}")
            
            if extracted_pdfs:
                print(f"\nüìÅ ARQUIVOS SALVOS EM: {self.pdf_dir.absolute()}")
                for pdf in extracted_pdfs:
                    zip_info = f" (de {pdf['original_zip']})" if pdf['original_zip'] else ""
                    print(f"  ‚Ä¢ {pdf['pdf_path'].name}{zip_info}")
                    print(f"    üìÑ {pdf['title'][:50]}... ({pdf['date_str']})")
                    
            return len(extracted_pdfs) > 0
            
        except Exception as e:
            print(f"‚ùå Erro: {e}")
            return False
            
        finally:
            if self.driver:
                input("\nPressione ENTER para fechar o navegador...")
                self.driver.quit()

def main():
    downloader = PreciseDownloader()
    
    try:
        success = downloader.run()
        
        if success:
            print("\nüéâ SUCESSO! PDFs baixados com sucesso!")
        else:
            print("\nüòî Nenhum PDF foi baixado")
            
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Processo interrompido")

if __name__ == "__main__":
    main()
